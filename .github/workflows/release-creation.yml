name: 🏷️ Release Creation Workflow

on:
  push:
    branches:
      - 'master'

env:
  UNIT_TESTS_COVERAGE_REPORTS_PATH: tests/unit/coverage
  UNIT_TESTS_COVERAGE_BASE_CACHE_KEY: tests-unit-coverage-master

jobs:
  code-ql:
    name: CodeQL Scan ❇️
    runs-on: ubuntu-latest
    timeout-minutes: 360
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout GitHub repository 📡
        uses: actions/checkout@v5

      - name: Initialize CodeQL ⚙️
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: AutoBuild 🌡️
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis ❇️
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript"

  install:
    name: Install ⚙️
    runs-on: ubuntu-latest
    steps:
      - name: Checkout GitHub repository 📡
        uses: actions/checkout@v5

      - name: Install pnpm 🏗️
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup NodeJS ✨
        uses: actions/setup-node@v5
        with:
          node-version-file: '.nvmrc'
          cache: 'pnpm'

      - name: Cache pnpm dependencies 🥡
        uses: actions/cache@v4
        id: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}

      - name: Install project dependencies 📦
        run: pnpm install
        if: steps.cache-node-modules.outputs.cache-hit != 'true'

  release:
    name: Release 🏷️
    runs-on: ubuntu-latest
    needs:
      - install
    env:
      GITHUB_TOKEN: ${{ secrets.SEMANTIC_RELEASE_TOKEN }}
    steps:
      - name: Checkout GitHub repository 📡
        uses: actions/checkout@v5
        with:
          persist-credentials: false

      - name: Install pnpm 🏗️
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup NodeJS ✨
        uses: actions/setup-node@v5
        with:
          node-version-file: '.nvmrc'
          cache: 'pnpm'

      - name: Restore pnpm dependencies from cache 🥡
        uses: actions/cache/restore@v4
        id: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}

      - name: Release 🏷️
        id: release
        run: npx semantic-release

    outputs:
      new-release-published: ${{ steps.release.outputs.new-release-published }}
      new-release-version: ${{ steps.release.outputs.new-release-version }}

  unit-tests:
    name: Unit Tests 🧪
    runs-on: ubuntu-latest
    needs:
      - install
    outputs:
      VITEST_TESTS_COUNT: ${{ steps.outputs.outputs.VITEST_TESTS_COUNT }}
      VITEST_STATEMENTS_COUNT: ${{ steps.outputs.outputs.VITEST_STATEMENTS_COUNT }}
      VITEST_BRANCHES_COUNT: ${{ steps.outputs.outputs.VITEST_BRANCHES_COUNT }}
      VITEST_FUNCTIONS_COUNT: ${{ steps.outputs.outputs.VITEST_FUNCTIONS_COUNT }}
      VITEST_LINES_COUNT: ${{ steps.outputs.outputs.VITEST_LINES_COUNT }}
      VITEST_STATEMENTS_PERCENT: ${{ steps.outputs.outputs.VITEST_STATEMENTS_PERCENT }}
      VITEST_BRANCHES_PERCENT: ${{ steps.outputs.outputs.VITEST_BRANCHES_PERCENT }}
      VITEST_FUNCTIONS_PERCENT: ${{ steps.outputs.outputs.VITEST_FUNCTIONS_PERCENT }}
      VITEST_LINES_PERCENT: ${{ steps.outputs.outputs.VITEST_LINES_PERCENT }}
    steps:
      - name: Checkout GitHub repository 📡
        uses: actions/checkout@v5

      - name: Install pnpm 🏗️
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup NodeJS ✨
        uses: actions/setup-node@v5
        with:
          node-version-file: '.nvmrc'
          cache: 'pnpm'

      - name: Restore pnpm dependencies from cache 🥡
        uses: actions/cache/restore@v4
        id: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}

      - name: Create Nuxt types ⛰️
        run: pnpm run postinstall

      - name: Unit tests 🧪
        id: unit-tests
        continue-on-error: true
        run: pnpm run test:unit:cov 2>&1 | ./scripts/transform-vitest-results-as-env-variables.sh >> "$GITHUB_ENV"

      - name: Set Vitest Results As Outputs 📝
        id: outputs
        run: |
          echo "VITEST_TESTS_COUNT=${{ env.VITEST_TESTS_COUNT }}" >> "$GITHUB_OUTPUT"
          echo "VITEST_STATEMENTS_COUNT=${{ env.VITEST_STATEMENTS_COUNT }}" >> "$GITHUB_OUTPUT"
          echo "VITEST_BRANCHES_COUNT=${{ env.VITEST_BRANCHES_COUNT }}" >> "$GITHUB_OUTPUT"
          echo "VITEST_FUNCTIONS_COUNT=${{ env.VITEST_FUNCTIONS_COUNT }}" >> "$GITHUB_OUTPUT"
          echo "VITEST_LINES_COUNT=${{ env.VITEST_LINES_COUNT }}" >> "$GITHUB_OUTPUT"
          echo "VITEST_STATEMENTS_PERCENT=${{ env.VITEST_STATEMENTS_PERCENT }}" >> "$GITHUB_OUTPUT"
          echo "VITEST_BRANCHES_PERCENT=${{ env.VITEST_BRANCHES_PERCENT }}" >> "$GITHUB_OUTPUT"
          echo "VITEST_FUNCTIONS_PERCENT=${{ env.VITEST_FUNCTIONS_PERCENT }}" >> "$GITHUB_OUTPUT"
          echo "VITEST_LINES_PERCENT=${{ env.VITEST_LINES_PERCENT }}" >> "$GITHUB_OUTPUT"

      - name: Save unit tests coverage in cache 🥡
        uses: actions/cache/save@v4
        id: cache-unit-tests-coverage
        if: ${{ hashFiles('tests/unit/coverage/lcov.info') != '' }}
        with:
          path: ${{ env.UNIT_TESTS_COVERAGE_REPORTS_PATH }}
          key: ${{ env.UNIT_TESTS_COVERAGE_BASE_CACHE_KEY }}-${{ hashFiles('tests/unit/coverage/lcov.info') }}

      - name: Save unit tests coverage report as artifact 💎
        uses: actions/upload-artifact@v4
        with:
          name: unit-tests-coverage-report
          path: ${{ env.UNIT_TESTS_COVERAGE_REPORTS_PATH }}
          retention-days: 2

      - name: Exit with error if unit tests failed 🚨
        if: steps.unit-tests.outcome != 'success'
        run: exit 1

  sonarcloud:
    name: SonarCloud Analysis 🌥️
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
      pull-requests: write
    needs:
      - unit-tests
    steps:
      - name: Checkout GitHub repository 📡
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Install pnpm 🏗️
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Restore pnpm dependencies from cache 🥡
        uses: actions/cache/restore@v4
        id: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}

      - name: Restore tests coverage from cache 🥡
        uses: actions/cache/restore@v4
        id: cache-unit-tests-coverage
        with:
          path: ${{ env.UNIT_TESTS_COVERAGE_REPORTS_PATH }}
          key: ${{ env.UNIT_TESTS_COVERAGE_BASE_CACHE_KEY }}-
          restore-keys: |
            ${{ env.UNIT_TESTS_COVERAGE_BASE_CACHE_KEY }}-

      - name: SonarCloud Scan 🌥️
        uses: SonarSource/sonarqube-scan-action@v6.0.0
        env:
          SONAR_TOKEN: ${{ secrets.SONARCLOUD_TOKEN }}
